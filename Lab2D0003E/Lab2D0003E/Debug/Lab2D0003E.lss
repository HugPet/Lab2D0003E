
Lab2D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000007e8  0000087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800104  00800104  00000880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138d  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a58  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000798  00000000  00000000  0000275d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001013  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000045e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0e 02       	muls	r16, r30
  5e:	bd 01       	movw	r22, r26
  60:	c6 01       	movw	r24, r12
  62:	cf 01       	movw	r24, r30
  64:	d8 01       	movw	r26, r16
  66:	e1 01       	movw	r28, r2
  68:	ea 01       	movw	r28, r20
  6a:	f3 01       	movw	r30, r6
  6c:	fc 01       	movw	r30, r24
  6e:	05 02       	muls	r16, r21

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ee       	ldi	r30, 0xE8	; 232
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a9 32       	cpi	r26, 0x29	; 41
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <main>
  a6:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <enqueue>:

void lock(mutex *m) {

}

void unlock(mutex *m) {
  ae:	dc 01       	movw	r26, r24
  b0:	15 96       	adiw	r26, 0x05	; 5
  b2:	1c 92       	st	X, r1
  b4:	1e 92       	st	-X, r1
  b6:	14 97       	sbiw	r26, 0x04	; 4
  b8:	db 01       	movw	r26, r22
  ba:	ed 91       	ld	r30, X+
  bc:	fc 91       	ld	r31, X
  be:	11 97       	sbiw	r26, 0x01	; 1
  c0:	30 97       	sbiw	r30, 0x00	; 0
  c2:	21 f4       	brne	.+8      	; 0xcc <enqueue+0x1e>
  c4:	8d 93       	st	X+, r24
  c6:	9c 93       	st	X, r25
  c8:	08 95       	ret
  ca:	f9 01       	movw	r30, r18
  cc:	24 81       	ldd	r18, Z+4	; 0x04
  ce:	35 81       	ldd	r19, Z+5	; 0x05
  d0:	21 15       	cp	r18, r1
  d2:	31 05       	cpc	r19, r1
  d4:	d1 f7       	brne	.-12     	; 0xca <enqueue+0x1c>
  d6:	95 83       	std	Z+5, r25	; 0x05
  d8:	84 83       	std	Z+4, r24	; 0x04
  da:	08 95       	ret

000000dc <dispatch>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <dispatch+0x6>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	9a 83       	std	Y+2, r25	; 0x02
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f2:	06 96       	adiw	r24, 0x06	; 6
  f4:	0e 94 b1 03 	call	0x762	; 0x762 <setjmp>
  f8:	89 2b       	or	r24, r25
  fa:	59 f4       	brne	.+22     	; 0x112 <dispatch+0x36>
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	06 96       	adiw	r24, 0x06	; 6
 10e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <longjmp>
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <spawn>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <spawn+0x6>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	ac 01       	movw	r20, r24
 128:	f8 94       	cli
 12a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 12e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 132:	89 2b       	or	r24, r25
 134:	19 f5       	brne	.+70     	; 0x17c <spawn+0x60>
 136:	82 ee       	ldi	r24, 0xE2	; 226
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <threads+0x5>
 13e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <threads+0x4>
 142:	8f e4       	ldi	r24, 0x4F	; 79
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <threads+0x72>
 14a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <threads+0x71>
 14e:	8c eb       	ldi	r24, 0xBC	; 188
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <threads+0xdf>
 156:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <threads+0xde>
 15a:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <threads+0x14c>
 15e:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <threads+0x14b>
 162:	90 e8       	ldi	r25, 0x80	; 128
 164:	94 b9       	out	0x04, r25	; 4
 166:	95 b9       	out	0x05, r25	; 5
 168:	15 be       	out	0x35, r1	; 53
 16a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 16e:	9d bb       	out	0x1d, r25	; 29
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 178:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 17c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 180:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	a1 f0       	breq	.+40     	; 0x1b4 <spawn+0x98>
 18c:	fc 01       	movw	r30, r24
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 196:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>
 19a:	51 83       	std	Z+1, r21	; 0x01
 19c:	40 83       	st	Z, r20
 19e:	73 83       	std	Z+3, r23	; 0x03
 1a0:	62 83       	std	Z+2, r22	; 0x02
 1a2:	15 82       	std	Z+5, r1	; 0x05
 1a4:	14 82       	std	Z+4, r1	; 0x04
 1a6:	cf 01       	movw	r24, r30
 1a8:	06 96       	adiw	r24, 0x06	; 6
 1aa:	0e 94 b1 03 	call	0x762	; 0x762 <setjmp>
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	49 f5       	brne	.+82     	; 0x204 <spawn+0xe8>
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <spawn+0x9a>
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <spawn+0x98>
 1b6:	78 94       	sei
 1b8:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 1bc:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 1c0:	ed 91       	ld	r30, X+
 1c2:	fc 91       	ld	r31, X
 1c4:	11 97       	sbiw	r26, 0x01	; 1
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	8d 91       	ld	r24, X+
 1ca:	9c 91       	ld	r25, X
 1cc:	13 97       	sbiw	r26, 0x03	; 3
 1ce:	09 95       	icall
 1d0:	f8 94       	cli
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	71 e0       	ldi	r23, 0x01	; 1
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1de:	0e 94 57 00 	call	0xae	; 0xae <enqueue>
 1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readyQ>
 1e6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readyQ+0x1>
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	51 f0       	breq	.+20     	; 0x202 <spawn+0xe6>
 1ee:	fc 01       	movw	r30, r24
 1f0:	24 81       	ldd	r18, Z+4	; 0x04
 1f2:	35 81       	ldd	r19, Z+5	; 0x05
 1f4:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <readyQ+0x1>
 1f8:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <readyQ>
 1fc:	0e 94 6e 00 	call	0xdc	; 0xdc <dispatch>
 200:	01 c0       	rjmp	.+2      	; 0x204 <spawn+0xe8>
 202:	ff cf       	rjmp	.-2      	; 0x202 <spawn+0xe6>
 204:	e9 81       	ldd	r30, Y+1	; 0x01
 206:	fa 81       	ldd	r31, Y+2	; 0x02
 208:	36 96       	adiw	r30, 0x06	; 6
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	87 59       	subi	r24, 0x97	; 151
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	91 8b       	std	Z+17, r25	; 0x11
 214:	80 8b       	std	Z+16, r24	; 0x10
 216:	93 8b       	std	Z+19, r25	; 0x13
 218:	82 8b       	std	Z+18, r24	; 0x12
 21a:	66 e0       	ldi	r22, 0x06	; 6
 21c:	71 e0       	ldi	r23, 0x01	; 1
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	0e 94 57 00 	call	0xae	; 0xae <enqueue>
 226:	78 94       	sei
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <yield>:
 232:	66 e0       	ldi	r22, 0x06	; 6
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23e:	0e 94 57 00 	call	0xae	; 0xae <enqueue>
 242:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readyQ>
 246:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readyQ+0x1>
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	51 f0       	breq	.+20     	; 0x262 <yield+0x30>
 24e:	fc 01       	movw	r30, r24
 250:	24 81       	ldd	r18, Z+4	; 0x04
 252:	35 81       	ldd	r19, Z+5	; 0x05
 254:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <readyQ+0x1>
 258:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <readyQ>
 25c:	0e 94 6e 00 	call	0xdc	; 0xdc <dispatch>
 260:	08 95       	ret
 262:	ff cf       	rjmp	.-2      	; 0x262 <yield+0x30>

00000264 <__vector_3>:

}

ISR(PCINT1_vect) {
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1

	
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <LCD_Init>:
        }
    }
}
void LCD_Init(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
 278:	86 e3       	ldi	r24, 0x36	; 54
 27a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
 27e:	87 e0       	ldi	r24, 0x07	; 7
 280:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
 284:	8f e0       	ldi	r24, 0x0F	; 15
 286:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 290:	08 95       	ret

00000292 <is_prime>:
    spawn(computePrimes, 3);
    computePrimes(0);
	//writeChar('2', 0);
}

bool is_prime(long i) {
 292:	4f 92       	push	r4
 294:	5f 92       	push	r5
 296:	6f 92       	push	r6
 298:	7f 92       	push	r7
 29a:	8f 92       	push	r8
 29c:	9f 92       	push	r9
 29e:	af 92       	push	r10
 2a0:	bf 92       	push	r11
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	4b 01       	movw	r8, r22
 2b0:	5c 01       	movw	r10, r24
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 2b2:	dc 01       	movw	r26, r24
 2b4:	cb 01       	movw	r24, r22
 2b6:	81 70       	andi	r24, 0x01	; 1
 2b8:	99 27       	eor	r25, r25
 2ba:	aa 27       	eor	r26, r26
 2bc:	b0 78       	andi	r27, 0x80	; 128
 2be:	bb 23       	and	r27, r27
 2c0:	54 f4       	brge	.+20     	; 0x2d6 <is_prime+0x44>
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	a1 09       	sbc	r26, r1
 2c6:	b1 09       	sbc	r27, r1
 2c8:	8e 6f       	ori	r24, 0xFE	; 254
 2ca:	9f 6f       	ori	r25, 0xFF	; 255
 2cc:	af 6f       	ori	r26, 0xFF	; 255
 2ce:	bf 6f       	ori	r27, 0xFF	; 255
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	a1 1d       	adc	r26, r1
 2d4:	b1 1d       	adc	r27, r1
 2d6:	89 2b       	or	r24, r25
 2d8:	8a 2b       	or	r24, r26
 2da:	8b 2b       	or	r24, r27
 2dc:	69 f1       	breq	.+90     	; 0x338 <is_prime+0xa6>
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	88 16       	cp	r8, r24
 2e2:	91 04       	cpc	r9, r1
 2e4:	a1 04       	cpc	r10, r1
 2e6:	b1 04       	cpc	r11, r1
 2e8:	4c f1       	brlt	.+82     	; 0x33c <is_prime+0xaa>
		if (i - 1 == n) return true;
 2ea:	24 01       	movw	r4, r8
 2ec:	35 01       	movw	r6, r10
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	48 1a       	sub	r4, r24
 2f2:	51 08       	sbc	r5, r1
 2f4:	61 08       	sbc	r6, r1
 2f6:	71 08       	sbc	r7, r1
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	48 16       	cp	r4, r24
 2fc:	51 04       	cpc	r5, r1
 2fe:	61 04       	cpc	r6, r1
 300:	71 04       	cpc	r7, r1
 302:	f1 f0       	breq	.+60     	; 0x340 <is_prime+0xae>
 304:	c2 e0       	ldi	r28, 0x02	; 2
 306:	d0 e0       	ldi	r29, 0x00	; 0
 308:	05 c0       	rjmp	.+10     	; 0x314 <is_prime+0x82>
 30a:	c4 14       	cp	r12, r4
 30c:	d5 04       	cpc	r13, r5
 30e:	e6 04       	cpc	r14, r6
 310:	f7 04       	cpc	r15, r7
 312:	c1 f0       	breq	.+48     	; 0x344 <is_prime+0xb2>
		n++;
 314:	21 96       	adiw	r28, 0x01	; 1
	//writeChar('2', 0);
}

bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 316:	6e 01       	movw	r12, r28
 318:	0d 2e       	mov	r0, r29
 31a:	00 0c       	add	r0, r0
 31c:	ee 08       	sbc	r14, r14
 31e:	ff 08       	sbc	r15, r15
 320:	c5 01       	movw	r24, r10
 322:	b4 01       	movw	r22, r8
 324:	a7 01       	movw	r20, r14
 326:	96 01       	movw	r18, r12
 328:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divmodsi4>
 32c:	67 2b       	or	r22, r23
 32e:	68 2b       	or	r22, r24
 330:	69 2b       	or	r22, r25
 332:	59 f7       	brne	.-42     	; 0x30a <is_prime+0x78>
		if (i - 1 == n) return true;
		n++;
	}
	return false;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	07 c0       	rjmp	.+14     	; 0x346 <is_prime+0xb4>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	05 c0       	rjmp	.+10     	; 0x346 <is_prime+0xb4>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	03 c0       	rjmp	.+6      	; 0x346 <is_prime+0xb4>
}

bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
		if (i - 1 == n) return true;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	01 c0       	rjmp	.+2      	; 0x346 <is_prime+0xb4>
 344:	81 e0       	ldi	r24, 0x01	; 1
		n++;
	}
	return false;
	
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	df 90       	pop	r13
 350:	cf 90       	pop	r12
 352:	bf 90       	pop	r11
 354:	af 90       	pop	r10
 356:	9f 90       	pop	r9
 358:	8f 90       	pop	r8
 35a:	7f 90       	pop	r7
 35c:	6f 90       	pop	r6
 35e:	5f 90       	pop	r5
 360:	4f 90       	pop	r4
 362:	08 95       	ret

00000364 <writeChar>:


void writeChar(char ch, int pos){
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	fc 01       	movw	r30, r24
 368:	f0 97       	sbiw	r30, 0x30	; 48
 36a:	ea 30       	cpi	r30, 0x0A	; 10
 36c:	f1 05       	cpc	r31, r1
 36e:	08 f0       	brcs	.+2      	; 0x372 <writeChar+0xe>
 370:	51 c1       	rjmp	.+674    	; 0x614 <__stack+0x115>
 372:	e2 5d       	subi	r30, 0xD2	; 210
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	0c 94 89 03 	jmp	0x712	; 0x712 <__tablejump2__>
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
 386:	e0 e0       	ldi	r30, 0x00	; 0
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	50 c0       	rjmp	.+160    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
 390:	2e e0       	ldi	r18, 0x0E	; 14
 392:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
 398:	e1 e0       	ldi	r30, 0x01	; 1
 39a:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
 39c:	47 c0       	rjmp	.+142    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
 3a2:	2b e0       	ldi	r18, 0x0B	; 11
 3a4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 3ae:	3e c0       	rjmp	.+124    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 3b4:	2b e0       	ldi	r18, 0x0B	; 11
 3b6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
 3b8:	45 e0       	ldi	r20, 0x05	; 5
 3ba:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
 3bc:	e0 e0       	ldi	r30, 0x00	; 0
 3be:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
 3c0:	35 c0       	rjmp	.+106    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
 3c6:	2b e0       	ldi	r18, 0x0B	; 11
 3c8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 3ca:	44 e0       	ldi	r20, 0x04	; 4
 3cc:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
 3ce:	e1 e0       	ldi	r30, 0x01	; 1
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 3d2:	2c c0       	rjmp	.+88     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
 3d8:	2f e0       	ldi	r18, 0x0F	; 15
 3da:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 3dc:	44 e0       	ldi	r20, 0x04	; 4
 3de:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
 3e0:	e1 e0       	ldi	r30, 0x01	; 1
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 3e4:	23 c0       	rjmp	.+70     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
 3f6:	1a c0       	rjmp	.+52     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
 3fc:	2f e0       	ldi	r18, 0x0F	; 15
 3fe:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 400:	45 e0       	ldi	r20, 0x05	; 5
 402:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
 404:	e1 e0       	ldi	r30, 0x01	; 1
 406:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 408:	11 c0       	rjmp	.+34     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 40e:	2b e0       	ldi	r18, 0x0B	; 11
 410:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 412:	45 e0       	ldi	r20, 0x05	; 5
 414:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
 416:	e1 e0       	ldi	r30, 0x01	; 1
 418:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
 420:	25 e0       	ldi	r18, 0x05	; 5
 422:	30 e0       	ldi	r19, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 424:	45 e0       	ldi	r20, 0x05	; 5
 426:	50 e0       	ldi	r21, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
 428:	e1 e0       	ldi	r30, 0x01	; 1
 42a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 42c:	62 30       	cpi	r22, 0x02	; 2
 42e:	71 05       	cpc	r23, r1
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	5d c0       	rjmp	.+186    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 434:	3c f4       	brge	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 436:	61 15       	cp	r22, r1
 438:	71 05       	cpc	r23, r1
 43a:	79 f0       	breq	.+30     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43c:	61 30       	cpi	r22, 0x01	; 1
 43e:	71 05       	cpc	r23, r1
 440:	29 f1       	breq	.+74     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 442:	08 95       	ret
 444:	64 30       	cpi	r22, 0x04	; 4
 446:	71 05       	cpc	r23, r1
 448:	09 f4       	brne	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	9b c0       	rjmp	.+310    	; 0x582 <__stack+0x83>
 44c:	0c f4       	brge	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	68 c0       	rjmp	.+208    	; 0x520 <__stack+0x21>
 450:	65 30       	cpi	r22, 0x05	; 5
 452:	71 05       	cpc	r23, r1
 454:	09 f4       	brne	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	ae c0       	rjmp	.+348    	; 0x5b4 <__stack+0xb5>
 458:	08 95       	ret
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
 45a:	ac ee       	ldi	r26, 0xEC	; 236
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	6c 91       	ld	r22, X

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 460:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
 462:	e6 2b       	or	r30, r22
 464:	ec 93       	st	X, r30
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 466:	e1 ef       	ldi	r30, 0xF1	; 241
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	60 81       	ld	r22, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 46c:	60 7f       	andi	r22, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 46e:	46 2b       	or	r20, r22
 470:	40 83       	st	Z, r20
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 472:	e6 ef       	ldi	r30, 0xF6	; 246
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	40 81       	ld	r20, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 478:	40 7f       	andi	r20, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 47a:	24 2b       	or	r18, r20
 47c:	20 83       	st	Z, r18
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 47e:	eb ef       	ldi	r30, 0xFB	; 251
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	20 81       	ld	r18, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 484:	20 7f       	andi	r18, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 486:	82 2b       	or	r24, r18
 488:	80 83       	st	Z, r24
		break;
 48a:	08 95       	ret
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
 48c:	ac ee       	ldi	r26, 0xEC	; 236
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 492:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
 494:	e2 95       	swap	r30
 496:	f2 95       	swap	r31
 498:	f0 7f       	andi	r31, 0xF0	; 240
 49a:	fe 27       	eor	r31, r30
 49c:	e0 7f       	andi	r30, 0xF0	; 240
 49e:	fe 27       	eor	r31, r30
 4a0:	e6 2b       	or	r30, r22
 4a2:	ec 93       	st	X, r30
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 4a4:	e1 ef       	ldi	r30, 0xF1	; 241
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	60 81       	ld	r22, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 4aa:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 4ac:	42 95       	swap	r20
 4ae:	52 95       	swap	r21
 4b0:	50 7f       	andi	r21, 0xF0	; 240
 4b2:	54 27       	eor	r21, r20
 4b4:	40 7f       	andi	r20, 0xF0	; 240
 4b6:	54 27       	eor	r21, r20
 4b8:	46 2b       	or	r20, r22
 4ba:	40 83       	st	Z, r20
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 4bc:	e6 ef       	ldi	r30, 0xF6	; 246
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	40 81       	ld	r20, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 4c2:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 4c4:	22 95       	swap	r18
 4c6:	32 95       	swap	r19
 4c8:	30 7f       	andi	r19, 0xF0	; 240
 4ca:	32 27       	eor	r19, r18
 4cc:	20 7f       	andi	r18, 0xF0	; 240
 4ce:	32 27       	eor	r19, r18
 4d0:	24 2b       	or	r18, r20
 4d2:	20 83       	st	Z, r18
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 4d4:	eb ef       	ldi	r30, 0xFB	; 251
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	20 81       	ld	r18, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 4da:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 4dc:	82 95       	swap	r24
 4de:	92 95       	swap	r25
 4e0:	90 7f       	andi	r25, 0xF0	; 240
 4e2:	98 27       	eor	r25, r24
 4e4:	80 7f       	andi	r24, 0xF0	; 240
 4e6:	98 27       	eor	r25, r24
 4e8:	82 2b       	or	r24, r18
 4ea:	80 83       	st	Z, r24
		break;
 4ec:	08 95       	ret
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 4ee:	ad ee       	ldi	r26, 0xED	; 237
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	6c 91       	ld	r22, X

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4f4:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 4f6:	e6 2b       	or	r30, r22
 4f8:	ec 93       	st	X, r30
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 4fa:	e2 ef       	ldi	r30, 0xF2	; 242
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	60 81       	ld	r22, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 500:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 502:	46 2b       	or	r20, r22
 504:	40 83       	st	Z, r20
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 506:	e7 ef       	ldi	r30, 0xF7	; 247
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	40 81       	ld	r20, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 50c:	40 7f       	andi	r20, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 50e:	24 2b       	or	r18, r20
 510:	20 83       	st	Z, r18
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 512:	ec ef       	ldi	r30, 0xFC	; 252
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	20 81       	ld	r18, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 518:	20 7f       	andi	r18, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 51a:	82 2b       	or	r24, r18
 51c:	80 83       	st	Z, r24
		break;
 51e:	08 95       	ret
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 520:	ad ee       	ldi	r26, 0xED	; 237
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 526:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 528:	e2 95       	swap	r30
 52a:	f2 95       	swap	r31
 52c:	f0 7f       	andi	r31, 0xF0	; 240
 52e:	fe 27       	eor	r31, r30
 530:	e0 7f       	andi	r30, 0xF0	; 240
 532:	fe 27       	eor	r31, r30
 534:	e6 2b       	or	r30, r22
 536:	ec 93       	st	X, r30
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 538:	e2 ef       	ldi	r30, 0xF2	; 242
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	60 81       	ld	r22, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 53e:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 540:	42 95       	swap	r20
 542:	52 95       	swap	r21
 544:	50 7f       	andi	r21, 0xF0	; 240
 546:	54 27       	eor	r21, r20
 548:	40 7f       	andi	r20, 0xF0	; 240
 54a:	54 27       	eor	r21, r20
 54c:	46 2b       	or	r20, r22
 54e:	40 83       	st	Z, r20
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 550:	e7 ef       	ldi	r30, 0xF7	; 247
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	40 81       	ld	r20, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 556:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 558:	22 95       	swap	r18
 55a:	32 95       	swap	r19
 55c:	30 7f       	andi	r19, 0xF0	; 240
 55e:	32 27       	eor	r19, r18
 560:	20 7f       	andi	r18, 0xF0	; 240
 562:	32 27       	eor	r19, r18
 564:	24 2b       	or	r18, r20
 566:	20 83       	st	Z, r18
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 568:	ec ef       	ldi	r30, 0xFC	; 252
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	20 81       	ld	r18, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 56e:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 570:	82 95       	swap	r24
 572:	92 95       	swap	r25
 574:	90 7f       	andi	r25, 0xF0	; 240
 576:	98 27       	eor	r25, r24
 578:	80 7f       	andi	r24, 0xF0	; 240
 57a:	98 27       	eor	r25, r24
 57c:	82 2b       	or	r24, r18
 57e:	80 83       	st	Z, r24
		break;
 580:	08 95       	ret
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
 582:	ae ee       	ldi	r26, 0xEE	; 238
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	6c 91       	ld	r22, X

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 588:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
 58a:	e6 2b       	or	r30, r22
 58c:	ec 93       	st	X, r30
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 58e:	e3 ef       	ldi	r30, 0xF3	; 243
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	60 81       	ld	r22, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 594:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 596:	46 2b       	or	r20, r22
 598:	40 83       	st	Z, r20
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 59a:	e8 ef       	ldi	r30, 0xF8	; 248
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	40 81       	ld	r20, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 5a0:	40 7f       	andi	r20, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 5a2:	24 2b       	or	r18, r20
 5a4:	20 83       	st	Z, r18
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 5a6:	ed ef       	ldi	r30, 0xFD	; 253
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	20 81       	ld	r18, Z

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 5ac:	20 7f       	andi	r18, 0xF0	; 240
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 5ae:	82 2b       	or	r24, r18
 5b0:	80 83       	st	Z, r24
		break;
 5b2:	08 95       	ret
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
 5b4:	ae ee       	ldi	r26, 0xEE	; 238
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 5ba:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
 5bc:	e2 95       	swap	r30
 5be:	f2 95       	swap	r31
 5c0:	f0 7f       	andi	r31, 0xF0	; 240
 5c2:	fe 27       	eor	r31, r30
 5c4:	e0 7f       	andi	r30, 0xF0	; 240
 5c6:	fe 27       	eor	r31, r30
 5c8:	e6 2b       	or	r30, r22
 5ca:	ec 93       	st	X, r30
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 5cc:	e3 ef       	ldi	r30, 0xF3	; 243
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	60 81       	ld	r22, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 5d2:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 5d4:	42 95       	swap	r20
 5d6:	52 95       	swap	r21
 5d8:	50 7f       	andi	r21, 0xF0	; 240
 5da:	54 27       	eor	r21, r20
 5dc:	40 7f       	andi	r20, 0xF0	; 240
 5de:	54 27       	eor	r21, r20
 5e0:	46 2b       	or	r20, r22
 5e2:	40 83       	st	Z, r20
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 5e4:	e8 ef       	ldi	r30, 0xF8	; 248
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	40 81       	ld	r20, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 5ea:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 5ec:	22 95       	swap	r18
 5ee:	32 95       	swap	r19
 5f0:	30 7f       	andi	r19, 0xF0	; 240
 5f2:	32 27       	eor	r19, r18
 5f4:	20 7f       	andi	r18, 0xF0	; 240
 5f6:	32 27       	eor	r19, r18
 5f8:	24 2b       	or	r18, r20
 5fa:	20 83       	st	Z, r18
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 5fc:	ed ef       	ldi	r30, 0xFD	; 253
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	20 81       	ld	r18, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 602:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 604:	82 95       	swap	r24
 606:	92 95       	swap	r25
 608:	90 7f       	andi	r25, 0xF0	; 240
 60a:	98 27       	eor	r25, r24
 60c:	80 7f       	andi	r24, 0xF0	; 240
 60e:	98 27       	eor	r25, r24
 610:	82 2b       	or	r24, r18
 612:	80 83       	st	Z, r24
 614:	08 95       	ret

00000616 <printAt>:
int writeReg(int num, int reg, bool shift);


bool is_prime(long i); // from lab 1

void printAt(long num, int pos) {
 616:	8f 92       	push	r8
 618:	9f 92       	push	r9
 61a:	af 92       	push	r10
 61c:	bf 92       	push	r11
 61e:	cf 92       	push	r12
 620:	df 92       	push	r13
 622:	ef 92       	push	r14
 624:	ff 92       	push	r15
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	4b 01       	movw	r8, r22
 62c:	5c 01       	movw	r10, r24
 62e:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 630:	24 e6       	ldi	r18, 0x64	; 100
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	40 e0       	ldi	r20, 0x00	; 0
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divmodsi4>
 63c:	0f 2e       	mov	r0, r31
 63e:	fa e0       	ldi	r31, 0x0A	; 10
 640:	cf 2e       	mov	r12, r31
 642:	d1 2c       	mov	r13, r1
 644:	e1 2c       	mov	r14, r1
 646:	f1 2c       	mov	r15, r1
 648:	f0 2d       	mov	r31, r0
 64a:	a7 01       	movw	r20, r14
 64c:	96 01       	movw	r18, r12
 64e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divmodsi4>
 652:	be 01       	movw	r22, r28
 654:	80 e3       	ldi	r24, 0x30	; 48
 656:	82 0f       	add	r24, r18
 658:	0e 94 b2 01 	call	0x364	; 0x364 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 65c:	21 96       	adiw	r28, 0x01	; 1
 65e:	c5 01       	movw	r24, r10
 660:	b4 01       	movw	r22, r8
 662:	a7 01       	movw	r20, r14
 664:	96 01       	movw	r18, r12
 666:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divmodsi4>
 66a:	86 2f       	mov	r24, r22
 66c:	be 01       	movw	r22, r28
 66e:	80 5d       	subi	r24, 0xD0	; 208
 670:	0e 94 b2 01 	call	0x364	; 0x364 <writeChar>
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	df 90       	pop	r13
 67e:	cf 90       	pop	r12
 680:	bf 90       	pop	r11
 682:	af 90       	pop	r10
 684:	9f 90       	pop	r9
 686:	8f 90       	pop	r8
 688:	08 95       	ret

0000068a <computePrimes>:

void computePrimes(int pos) {
 68a:	ec 01       	movw	r28, r24
    long n;
	unsigned char i;

    for(n = 1; ; n++) {
 68c:	c1 2c       	mov	r12, r1
 68e:	d1 2c       	mov	r13, r1
 690:	76 01       	movw	r14, r12
 692:	c3 94       	inc	r12
        if (is_prime(n)) {
 694:	c7 01       	movw	r24, r14
 696:	b6 01       	movw	r22, r12
 698:	0e 94 49 01 	call	0x292	; 0x292 <is_prime>
 69c:	88 23       	and	r24, r24
 69e:	41 f0       	breq	.+16     	; 0x6b0 <computePrimes+0x26>
            printAt(n, pos);
 6a0:	ae 01       	movw	r20, r28
 6a2:	c7 01       	movw	r24, r14
 6a4:	b6 01       	movw	r22, r12
 6a6:	0e 94 0b 03 	call	0x616	; 0x616 <printAt>
			i = PINB & 0x80;
			if (i != 0x80) {
 6aa:	1f 9b       	sbis	0x03, 7	; 3
				yield();
 6ac:	0e 94 19 01 	call	0x232	; 0x232 <yield>

void computePrimes(int pos) {
    long n;
	unsigned char i;

    for(n = 1; ; n++) {
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	c8 1a       	sub	r12, r24
 6b4:	d8 0a       	sbc	r13, r24
 6b6:	e8 0a       	sbc	r14, r24
 6b8:	f8 0a       	sbc	r15, r24
			i = PINB & 0x80;
			if (i != 0x80) {
				yield();
			}
        }
    }
 6ba:	ec cf       	rjmp	.-40     	; 0x694 <computePrimes+0xa>

000006bc <main>:
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
	
}

int main() {
	LCD_Init();
 6bc:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_Init>
    spawn(computePrimes, 3);
 6c0:	63 e0       	ldi	r22, 0x03	; 3
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	85 e4       	ldi	r24, 0x45	; 69
 6c6:	93 e0       	ldi	r25, 0x03	; 3
 6c8:	0e 94 8e 00 	call	0x11c	; 0x11c <spawn>
    computePrimes(0);
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 45 03 	call	0x68a	; 0x68a <computePrimes>

000006d4 <__divmodsi4>:
 6d4:	05 2e       	mov	r0, r21
 6d6:	97 fb       	bst	r25, 7
 6d8:	1e f4       	brtc	.+6      	; 0x6e0 <__divmodsi4+0xc>
 6da:	00 94       	com	r0
 6dc:	0e 94 81 03 	call	0x702	; 0x702 <__negsi2>
 6e0:	57 fd       	sbrc	r21, 7
 6e2:	07 d0       	rcall	.+14     	; 0x6f2 <__divmodsi4_neg2>
 6e4:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 6e8:	07 fc       	sbrc	r0, 7
 6ea:	03 d0       	rcall	.+6      	; 0x6f2 <__divmodsi4_neg2>
 6ec:	4e f4       	brtc	.+18     	; 0x700 <__divmodsi4_exit>
 6ee:	0c 94 81 03 	jmp	0x702	; 0x702 <__negsi2>

000006f2 <__divmodsi4_neg2>:
 6f2:	50 95       	com	r21
 6f4:	40 95       	com	r20
 6f6:	30 95       	com	r19
 6f8:	21 95       	neg	r18
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	4f 4f       	sbci	r20, 0xFF	; 255
 6fe:	5f 4f       	sbci	r21, 0xFF	; 255

00000700 <__divmodsi4_exit>:
 700:	08 95       	ret

00000702 <__negsi2>:
 702:	90 95       	com	r25
 704:	80 95       	com	r24
 706:	70 95       	com	r23
 708:	61 95       	neg	r22
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	8f 4f       	sbci	r24, 0xFF	; 255
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	08 95       	ret

00000712 <__tablejump2__>:
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	05 90       	lpm	r0, Z+
 718:	f4 91       	lpm	r31, Z
 71a:	e0 2d       	mov	r30, r0
 71c:	09 94       	ijmp

0000071e <__udivmodsi4>:
 71e:	a1 e2       	ldi	r26, 0x21	; 33
 720:	1a 2e       	mov	r1, r26
 722:	aa 1b       	sub	r26, r26
 724:	bb 1b       	sub	r27, r27
 726:	fd 01       	movw	r30, r26
 728:	0d c0       	rjmp	.+26     	; 0x744 <__udivmodsi4_ep>

0000072a <__udivmodsi4_loop>:
 72a:	aa 1f       	adc	r26, r26
 72c:	bb 1f       	adc	r27, r27
 72e:	ee 1f       	adc	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	a2 17       	cp	r26, r18
 734:	b3 07       	cpc	r27, r19
 736:	e4 07       	cpc	r30, r20
 738:	f5 07       	cpc	r31, r21
 73a:	20 f0       	brcs	.+8      	; 0x744 <__udivmodsi4_ep>
 73c:	a2 1b       	sub	r26, r18
 73e:	b3 0b       	sbc	r27, r19
 740:	e4 0b       	sbc	r30, r20
 742:	f5 0b       	sbc	r31, r21

00000744 <__udivmodsi4_ep>:
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	1a 94       	dec	r1
 74e:	69 f7       	brne	.-38     	; 0x72a <__udivmodsi4_loop>
 750:	60 95       	com	r22
 752:	70 95       	com	r23
 754:	80 95       	com	r24
 756:	90 95       	com	r25
 758:	9b 01       	movw	r18, r22
 75a:	ac 01       	movw	r20, r24
 75c:	bd 01       	movw	r22, r26
 75e:	cf 01       	movw	r24, r30
 760:	08 95       	ret

00000762 <setjmp>:
 762:	dc 01       	movw	r26, r24
 764:	2d 92       	st	X+, r2
 766:	3d 92       	st	X+, r3
 768:	4d 92       	st	X+, r4
 76a:	5d 92       	st	X+, r5
 76c:	6d 92       	st	X+, r6
 76e:	7d 92       	st	X+, r7
 770:	8d 92       	st	X+, r8
 772:	9d 92       	st	X+, r9
 774:	ad 92       	st	X+, r10
 776:	bd 92       	st	X+, r11
 778:	cd 92       	st	X+, r12
 77a:	dd 92       	st	X+, r13
 77c:	ed 92       	st	X+, r14
 77e:	fd 92       	st	X+, r15
 780:	0d 93       	st	X+, r16
 782:	1d 93       	st	X+, r17
 784:	cd 93       	st	X+, r28
 786:	dd 93       	st	X+, r29
 788:	ff 91       	pop	r31
 78a:	ef 91       	pop	r30
 78c:	8d b7       	in	r24, 0x3d	; 61
 78e:	8d 93       	st	X+, r24
 790:	8e b7       	in	r24, 0x3e	; 62
 792:	8d 93       	st	X+, r24
 794:	8f b7       	in	r24, 0x3f	; 63
 796:	8d 93       	st	X+, r24
 798:	ed 93       	st	X+, r30
 79a:	fd 93       	st	X+, r31
 79c:	88 27       	eor	r24, r24
 79e:	99 27       	eor	r25, r25
 7a0:	09 94       	ijmp

000007a2 <longjmp>:
 7a2:	dc 01       	movw	r26, r24
 7a4:	cb 01       	movw	r24, r22
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	91 05       	cpc	r25, r1
 7aa:	81 1d       	adc	r24, r1
 7ac:	2d 90       	ld	r2, X+
 7ae:	3d 90       	ld	r3, X+
 7b0:	4d 90       	ld	r4, X+
 7b2:	5d 90       	ld	r5, X+
 7b4:	6d 90       	ld	r6, X+
 7b6:	7d 90       	ld	r7, X+
 7b8:	8d 90       	ld	r8, X+
 7ba:	9d 90       	ld	r9, X+
 7bc:	ad 90       	ld	r10, X+
 7be:	bd 90       	ld	r11, X+
 7c0:	cd 90       	ld	r12, X+
 7c2:	dd 90       	ld	r13, X+
 7c4:	ed 90       	ld	r14, X+
 7c6:	fd 90       	ld	r15, X+
 7c8:	0d 91       	ld	r16, X+
 7ca:	1d 91       	ld	r17, X+
 7cc:	cd 91       	ld	r28, X+
 7ce:	dd 91       	ld	r29, X+
 7d0:	ed 91       	ld	r30, X+
 7d2:	fd 91       	ld	r31, X+
 7d4:	0d 90       	ld	r0, X+
 7d6:	f8 94       	cli
 7d8:	fe bf       	out	0x3e, r31	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	ed bf       	out	0x3d, r30	; 61
 7de:	ed 91       	ld	r30, X+
 7e0:	fd 91       	ld	r31, X+
 7e2:	09 94       	ijmp

000007e4 <_exit>:
 7e4:	f8 94       	cli

000007e6 <__stop_program>:
 7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <__stop_program>
